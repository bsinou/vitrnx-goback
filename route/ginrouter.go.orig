package route

import (
	"log"

	"github.com/gin-gonic/gin"

	"github.com/bsinou/vitrnx-goback/handler"
	"github.com/bsinou/vitrnx-goback/model"
)

// StartRouter starts the main gin gonic router after configuration.
func StartRouter() {
	r := gin.Default()
	r.Use(loggingHandler(), cors())
	declareRoutes(r)
	log.Fatal(r.Run(":8888"))
}

func declareRoutes(r *gin.Engine) {

	// // AUTH ENTRY POINT
	// authG := r.Group(model.AuthPrefix)
	// {
	// 	authG.OPTIONS("/login", handler.DoNothing)
	// 	authG.POST("/login", checkCredentials(), handler.DoNothing)
	// }

	// // Basic test
	// authTests := authG.Group("/ab-check")
	// {
	// 	authTests.OPTIONS("", handler.DoNothing)
	// 	authTests.GET("", handler.BasicCheck)

	// }

	// API ENTRY POINT
	// Must be logged in
	apiG := r.Group(model.ApiPrefix)
	apiG.Use(verifyToken(), connect())

	// Users
	user := apiG.Group("/users")
	{
		// Configure wrappers for this group
		// user.Use(loggingHandler(), cors(), checkCredentials(), Connect(), addUserMeta())
		user.Use(addUserMeta())
		// Enable fetch with js and CORS
		user.OPTIONS("", handler.DoNothing)
		user.OPTIONS(":id", handler.DoNothing)
		user.OPTIONS(":id/roles", handler.DoNothing)

		// REST
		user.GET("", handler.GetUsers)                                 // query with params
		user.GET(":"+model.KeyUserID, handler.GetUser)                 // get one
		user.POST("", applyUserCreationPolicies(), handler.CreateUser) // CREATION
		user.PATCH(":id", applyUserUpdatePolicies(), handler.PatchUser)
		user.DELETE(":"+model.KeyUserID, applyUserDeletePolicies(), handler.DeleteUser)
		user.PATCH(":id/roles", applyUserRolesUpdatePolicies(), handler.PatchUserRoles)
	}

	// Roles
	roles := apiG.Group("/roles")
	{
		roles.OPTIONS("", handler.DoNothing) // POST
		//roles.OPTIONS(":"+model.KeyMgoID, handler.DoNothing) // PUT, DELETE
		roles.GET("", handler.GetRoles) // query with params
	}

	// Groups
	groups := apiG.Group("/groups")
	{
		groups.OPTIONS("", handler.DoNothing) // POST
		groups.GET("", handler.GetGroups)     // query with params
	}

	// Posts
	posts := apiG.Group("/posts")
	{
		// Configure wrappers for this group
		// posts.Use(addUserMeta(), unmarshallPost(), applyPostPolicies())

		// Enable fetch with js and CORS
		posts.OPTIONS("", handler.DoNothing)                            // POST
		posts.OPTIONS(":"+model.KeySlug, handler.DoNothing)             // PUT, DELETE
		posts.OPTIONS(":"+model.KeySlug+"/comments", handler.DoNothing) // PUT, DELETE

		// REST
		posts.GET("", handler.GetPosts)               // query with params
		posts.GET(":"+model.KeySlug, handler.GetPost) // get one
		// posts.GET(":"+model.KeySlug+"/comments", handler.ListPostComments) // get post comments
		posts.POST("", handler.CreatePost)                  // new post
		posts.POST(":"+model.KeySlug, handler.UpdatePost)   // update post
		posts.DELETE(":"+model.KeySlug, handler.DeletePost) // delete post
	}

	// // Comments
	// comments := apiG.Group("/comments")
	// {
	// 	// comments.Use(loggingHandler(), cors(), checkCredentials(), Connect(), addUserMeta(), unmarshallComment(), applyCommentPolicies())
	// 	comments.Use(addUserMeta(), unmarshallComment(), applyCommentPolicies())
	// 	comments.OPTIONS("", handler.DoNothing)
	// 	comments.OPTIONS(":"+model.KeyMgoID, handler.DoNothing)

	// 	// REST
	// 	comments.GET("", handler.ListComments)                     // query with params
	// 	comments.POST("", handler.PutComment)                      // Create or update
	// 	comments.DELETE(":"+model.KeyMgoID, handler.DeleteComment) // delete comment
	// }

	// // Tasks
	// tasks := apiG.Group("/tasks")
	// {
	// 	tasks.Use(addUserMeta(), unmarshallTask(), applyTaskPolicies())
	// 	tasks.OPTIONS("", handler.DoNothing)
	// 	// tasks.OPTIONS(":"+model.KeyCategoryID, handler.DoNothing)
	// 	tasks.OPTIONS(":"+model.KeyMgoID, handler.DoNothing)

	// 	// REST
	// 	tasks.GET("", handler.ListTasks)
	// 	tasks.GET(":"+model.KeyCategoryID, handler.ListTasks)
	// 	tasks.POST("", handler.PutTask)
	// 	tasks.POST(":"+model.KeyMgoID, handler.PutTask)
	// 	tasks.DELETE(":"+model.KeyMgoID, handler.DeleteTask)
	// }

	// PUBLIC ENTRY POINT
	// Anonymous users can only see public posts, static pages and a few utils pages

	pubG := r.Group(model.PublicPrefix)

	// TODO add limited credentials to also track anonymous user to prevent DDOS and other attacks
	pubG.Use(pubconnect())

	// // Basic test
	// tests := pubG.Group("/ab-check")
	// {
	// 	// tests.Use(addUserMeta(), unmarshall... , applyPolicies...)
	// 	tests.OPTIONS("", handler.DoNothing)

	// 	// REST
	// 	tests.GET("", handler.BasicCheck)
	// }

	// Posts
	pposts := pubG.Group("/posts")
	{
		// Configure wrappers for this group
		// posts.Use(loggingHandler(), cors(), checkCredentials(), Connect(), addUserMeta(), unmarshallPost(), applyPostPolicies())
		pposts.Use(unmarshallPost())

		// REST
		pposts.GET("", handler.GetPosts)               // query with params
		pposts.GET(":"+model.KeySlug, handler.GetPost) // get one
		// pposts.GET(":"+model.KeySlug+"/comments", handler.ListPostComments) // get post comments
	}
}
